diff --git a/src/http/modules/ngx_http_limit_req_module.c b/src/http/modules/ngx_http_limit_req_module.c
index 5d5cbe9..373de0b 100644
--- a/src/http/modules/ngx_http_limit_req_module.c
+++ b/src/http/modules/ngx_http_limit_req_module.c
@@ -16,7 +16,7 @@ typedef struct {
     u_short                      len;
     ngx_queue_t                  queue;
     ngx_msec_t                   last;
-    /* integer value, 1 corresponds to 0.001 r/s */
+    /* integer value, 1 corresponds to 0.0001 r/s */
     ngx_uint_t                   excess;
     ngx_uint_t                   count;
     u_char                       data[1];
@@ -212,8 +212,8 @@ ngx_http_limit_req_handler(ngx_http_request_t *r)
         ngx_shmtx_unlock(&ctx->shpool->mutex);
 
         ngx_log_debug4(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
-                       "limit_req[%ui]: %i %ui.%03ui",
-                       n, rc, excess / 1000, excess % 1000);
+                       "limit_req[%ui]: %i %ui.%04ui",
+                       n, rc, excess / 10000, excess % 10000);
 
         if (rc != NGX_AGAIN) {
             break;
@@ -230,8 +230,8 @@ ngx_http_limit_req_handler(ngx_http_request_t *r)
 
         if (rc == NGX_BUSY) {
             ngx_log_error(lrcf->limit_log_level, r->connection->log, 0,
-                          "limiting requests, excess: %ui.%03ui by zone \"%V\"",
-                          excess / 1000, excess % 1000,
+                          "limiting requests, excess: %ui.%04ui by zone \"%V\"",
+                          excess / 10000, excess % 10000,
                           &limit->shm_zone->shm.name);
         }
 
@@ -261,14 +261,15 @@ ngx_http_limit_req_handler(ngx_http_request_t *r)
     }
 
     delay = ngx_http_limit_req_account(limits, n, &excess, &limit);
+    delay = delay / 10;
 
     if (!delay) {
         return NGX_DECLINED;
     }
 
     ngx_log_error(lrcf->delay_log_level, r->connection->log, 0,
-                  "delaying request, excess: %ui.%03ui, by zone \"%V\"",
-                  excess / 1000, excess % 1000, &limit->shm_zone->shm.name);
+                  "delaying request, excess: %ui.%04ui, by zone \"%V\"",
+                  excess / 10000, excess % 10000, &limit->shm_zone->shm.name);
 
     if (ngx_handle_read_event(r->connection->read, 0) != NGX_OK) {
         return NGX_HTTP_INTERNAL_SERVER_ERROR;
@@ -401,7 +402,7 @@ ngx_http_limit_req_lookup(ngx_http_limit_req_limit_t *limit, ngx_uint_t hash,
 
             ms = (ngx_msec_int_t) (now - lr->last);
 
-            excess = lr->excess - ctx->rate * ngx_abs(ms) / 1000 + 1000;
+            excess = lr->excess - ctx->rate * ngx_abs(ms) / 1000 + 10000;
 
             if (excess < 0) {
                 excess = 0;
@@ -496,7 +497,7 @@ ngx_http_limit_req_account(ngx_http_limit_req_limit_t *limits, ngx_uint_t n,
 
     } else {
         ctx = (*limit)->shm_zone->data;
-        max_delay = excess * 1000 / ctx->rate;
+        max_delay = excess * 10000 / ctx->rate;
     }
 
     while (n--) {
@@ -514,7 +515,7 @@ ngx_http_limit_req_account(ngx_http_limit_req_limit_t *limits, ngx_uint_t n,
         now = (ngx_msec_t) (tp->sec * 1000 + tp->msec);
         ms = (ngx_msec_int_t) (now - lr->last);
 
-        excess = lr->excess - ctx->rate * ngx_abs(ms) / 1000 + 1000;
+        excess = lr->excess - ctx->rate * ngx_abs(ms) / 1000 + 10000;
 
         if (excess < 0) {
             excess = 0;
@@ -532,7 +533,7 @@ ngx_http_limit_req_account(ngx_http_limit_req_limit_t *limits, ngx_uint_t n,
             continue;
         }
 
-        delay = excess * 1000 / ctx->rate;
+        delay = excess * 10000 / ctx->rate;
 
         if (delay > max_delay) {
             max_delay = delay;
@@ -809,6 +810,10 @@ ngx_http_limit_req_zone(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
             } else if (ngx_strncmp(p, "r/m", 3) == 0) {
                 scale = 60;
                 len -= 3;
+
+            } else if (ngx_strncmp(p, "r/h", 3) == 0) {
+                scale = 3600;
+                len -= 3;
             }
 
             rate = ngx_atoi(value[i].data + 5, len - 5);
@@ -833,7 +838,7 @@ ngx_http_limit_req_zone(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
         return NGX_CONF_ERROR;
     }
 
-    ctx->rate = rate * 1000 / scale;
+    ctx->rate = rate * 10000 / scale;
 
     shm_zone = ngx_shared_memory_add(cf, &name, size,
                                      &ngx_http_limit_req_module);
@@ -949,7 +954,7 @@ ngx_http_limit_req(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
     }
 
     limit->shm_zone = shm_zone;
-    limit->burst = burst * 1000;
+    limit->burst = burst * 10000;
     limit->nodelay = nodelay;
 
     return NGX_CONF_OK;
